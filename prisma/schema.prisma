generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Category {
  id       Int       @id @default(autoincrement())
  name     String
  imageUrl String
  products Product[]
}

model Product {
  id            Int            @id @default(autoincrement())
  name          String
  description   String
  price         Float
  categoryId    Int
  category      Category       @relation(fields: [categoryId], references: [id])
  images        ProductImage[]
  variants      Variant[]
  cartItems     CartItem[]
  saleProducts  SaleProduct[]
} 

model Variant {
  id        Int             @id @default(autoincrement())
  name      String
  product   Product         @relation(fields: [productId], references: [id], onDelete: Cascade)
  productId Int
  options   VariantOption[]
}

model VariantOption {
  id        Int        @id @default(autoincrement())
  value     String
  variant   Variant    @relation(fields: [variantId], references: [id])
  variantId Int
  cartItems CartItem[]
}

model ProductImage {
  id        Int     @id @default(autoincrement())
  url       String
  productId Int
  product   Product @relation(fields: [productId], references: [id], onDelete: Cascade)
}

model CartItem {
  id              Int            @id @default(autoincrement())
  product         Product        @relation(fields: [productId], references: [id])
  productId       Int
  variantOption   VariantOption? @relation(fields: [variantOptionId], references: [id])
  variantOptionId Int?
  quantity        Int            @default(1)
}

model User {
  id        Int      @id @default(autoincrement())
  email     String   @unique
  password  String
  phone     String?
  role      Role     @default(USER)
  createdAt DateTime @default(now())
  firstName String
  lastName  String
  Sale      Sale[]
}

enum Role {
  USER
  ADMIN
}

model CarouselImage {
  id        String   @id @default(uuid())
  imageUrl  String
  isActive  Boolean  @default(true)
  order     Int
  createdAt DateTime @default(now())
}

model Sale {
  id             Int           @id @default(autoincrement())
  total          Float
  createdAt      DateTime      @default(now())
  userId         Int
  user           User          @relation(fields: [userId], references: [id])
  saleProducts   SaleProduct[]
  deliveryMethod String        
  shippingAddress String?      
  postalCode      String?      
  shippingCost    Float?       
}

enum PaymentMethod {
  TRANSFER
  MERCADO_PAGO
}

enum ShippingMethod {
  PICKUP
  DELIVERY
}

model SaleProduct {
  id        Int     @id @default(autoincrement())
  sale      Sale    @relation(fields: [saleId], references: [id], onDelete: Cascade)
  saleId    Int
  product   Product @relation(fields: [productId], references: [id], onDelete: Cascade)
  productId Int
}
